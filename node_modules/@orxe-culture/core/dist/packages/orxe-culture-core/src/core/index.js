// ****  Usage in Components  ****:
// In development i18Next will be initialized by components
// ****  Usage in Micro Front Ends  ****:
// While Consuming this components in Micro FrontEnd Application, MFA will initialize i18Next
// Instance of i18Next will be consumed by components
// Details have documented on confluence
// https://tavisca.atlassian.net/wiki/spaces/ORXE3/pages/870056054/Culture+Implementation
import i18nDefault from 'i18next';
import { CultureConfig } from './config';
class CultureCore {
    static async setCultureConfig(localCultureConfig) {
        const { production = false } = localCultureConfig;
        if (!production) {
            CultureCore.cultureConfig = new CultureConfig(localCultureConfig);
        }
        else {
            // TODO:
            // In Production fetch resources from a URL.
            // CultureCore.config.resources = await CultureCore.fetchResources(url);
        }
    }
}
CultureCore.cultureConfig = new CultureConfig();
CultureCore.i18nDefault = i18nDefault;
CultureCore.language = i18nDefault.language;
CultureCore.isInsideMicroFrontEnd = CultureCore.cultureConfig.isInsideMicroFrontEnd;
CultureCore.getI18Next = () => {
    return CultureCore.i18nDefault;
};
CultureCore.getSelectedLanguage = () => {
    return CultureCore.language;
};
CultureCore.setContainerAsMicroFrontEnd = () => {
    CultureCore.cultureConfig.isInsideMicroFrontEnd = true;
};
/**
 *
 *
 * @static
 * @memberof CultureCore
 * Function for initializing i18next in Lit/Angular/React.
 * This function can be invoked directly in lit element.
 * This function is passed as a callback function to angular-i18next.
 * Can be invoked only once, initialized i18Next is passed to second consumer.
 * While invoking this function inside angular-i18Next it passes ref of i18Next as first arg.
 * While invoking in Lit Element no such arg would be passed.
 */
CultureCore.cultureCoreInit = async (localCultureConfig) => {
    try {
        if (CultureCore.i18nDefault.isInitialized ||
            CultureCore.cultureConfig.isInsideMicroFrontEnd) {
            return CultureCore.i18nDefault;
        }
        await CultureCore.setCultureConfig(localCultureConfig);
        return CultureCore.i18nDefault.init(CultureCore.cultureConfig);
    }
    catch (error) {
        // IF FETCH Resources failed in production MFA NEEDS TO HANDLE,
        // RETURNING Error Back to MFA.
        return new Error(error);
    }
};
const selectedLanguage = CultureCore.getSelectedLanguage();
const cultureCoreInit = CultureCore.cultureCoreInit;
const isInsideMicroFrontEnd = CultureCore.isInsideMicroFrontEnd;
const setContainerAsMicroFrontEnd = CultureCore.setContainerAsMicroFrontEnd;
export { i18nDefault, cultureCoreInit, selectedLanguage, isInsideMicroFrontEnd, setContainerAsMicroFrontEnd, };
//# sourceMappingURL=index.js.map