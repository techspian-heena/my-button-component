import { i18nDefault } from '../';
import { BehaviorSubject, Subject } from 'rxjs';
export const CultureDefaultEvents = {
    INITIALIZED: 'initialized',
    LOADED: 'loaded',
    FAILED_LOADING: 'failedLoading',
    LANGUAGE_CHANGED: 'languageChanged',
    MISSING_KEY: 'missingKey',
};
export class TranslationEvents {
    constructor() {
        this.initialized = new BehaviorSubject(false);
        this.languageChanged = new BehaviorSubject(false);
        this.loaded = new BehaviorSubject(false);
        this.failedLoading = new Subject();
        this.missingKey = new Subject();
    }
}
export const events = new TranslationEvents();
(function subscribeEvents() {
    i18nDefault.on.call(i18nDefault, CultureDefaultEvents.INITIALIZED, (options) => {
        events.initialized.next(options);
    });
    i18nDefault.on.call(i18nDefault, CultureDefaultEvents.LOADED, (loaded) => events.loaded.next(loaded));
    i18nDefault.on.call(i18nDefault, CultureDefaultEvents.FAILED_LOADING, (lng, ns, msg) => events.failedLoading.next({ lng, ns, msg }));
    i18nDefault.on.call(i18nDefault, CultureDefaultEvents.LANGUAGE_CHANGED, (lng) => {
        events.languageChanged.next(lng);
    });
    i18nDefault.on.call(i18nDefault, CultureDefaultEvents.MISSING_KEY, (lngs, namespace, key, res) => events.missingKey.next({ lngs, namespace, key, res }));
})();
(function logMissingKeys() {
    events.missingKey.subscribe((res) => {
        if (res) {
            // eslint-disable-next-line no-console
            console.error(`There's a missing key by name: ${res.key}, in language ${res.lngs} of namespace ${res.namespace}`);
        }
    });
})();
//# sourceMappingURL=index.js.map