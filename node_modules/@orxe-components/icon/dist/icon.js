var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { svg, LitElement, customElement, property } from 'lit-element';
import styles from './icon-css';
let OrxeIcon = class OrxeIcon extends LitElement {
    constructor() {
        super();
        this.size = 'normal';
        this.icon = '';
    }
    render() {
        return svg `
      ${this.icon ? this._applyIcon() : ``}
    `;
    }
    _createIconMap() {
        let icon = null;
        const iconSplit = this.icon.split(':');
        const iconSetProvided = iconSplit.length > 1;
        const iconSetName = iconSetProvided ? iconSplit.shift() : 'default';
        const iconName = iconSetProvided ? iconSplit.pop() : this.icon;
        const iconset = document.head.querySelector(`template#${iconSetName}`);
        if (iconset && iconset.content) {
            const selectedIcon = iconset.content.querySelector(`[name=${iconName}]`);
            icon = selectedIcon ? selectedIcon.cloneNode(true) : icon;
        }
        return icon;
    }
    _applyIcon() {
        const content = this._createIconMap();
        let svg = null;
        if (content) {
            svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
            svg.setAttribute('viewBox', '0 0 32 32');
            svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');
            svg.setAttribute('focusable', 'false');
            svg.setAttribute('aria-hidden', 'true');
            [...content.children].forEach((item) => {
                svg.appendChild(item);
            });
        }
        return svg;
    }
};
OrxeIcon.styles = styles;
__decorate([
    property({ type: String, attribute: 'icon' }),
    __metadata("design:type", String)
], OrxeIcon.prototype, "icon", void 0);
__decorate([
    property({ type: String, reflect: true }),
    __metadata("design:type", String)
], OrxeIcon.prototype, "size", void 0);
OrxeIcon = __decorate([
    customElement('orxe-icon'),
    __metadata("design:paramtypes", [])
], OrxeIcon);
export default OrxeIcon;
