export default function SelectableBehaviour(Base) {
    const keys = {
        end: 35,
        home: 36,
        left: 37,
        up: 38,
        right: 39,
        down: 40,
        delete: 46,
        enter: 13,
        space: 32,
    };
    return class extends Base {
        constructor(...args) {
            super(args);
            this.selected = 0;
            this.selectedClass = '';
            this.automaticActivation = false;
        }
        set activated(selectedIndex) {
            this.activatedElem = this.selectableItems.find((el) => el.index === selectedIndex);
        }
        get activated() {
            return this.activatedElem;
        }
        get selectableItemLength() {
            let childrens = this.children;
            if (this.customElementSelector) {
                childrens = this.renderRoot.querySelectorAll(this.customElementSelector);
            }
            return [...childrens].filter((el) => !el.disabled).length;
        }
        get selectableItems() {
            let childrens = this.children;
            if (this.customElementSelector) {
                childrens = this.renderRoot.querySelectorAll(this.customElementSelector);
            }
            return [...childrens]
                .map((el, index) => {
                el.index = index;
                return el;
            })
                .filter((el) => !el.disabled);
        }
        get focusedIndex() {
            return this.selectableItems.findIndex((element) => element.hasAttribute('focused'));
        }
        selectActiveElement() {
            if (this.selected >= 0) {
                this.activated = this.selected;
                this.activated['active'] = true;
                if (this.selectedClass) {
                    this._removeSelectedClass();
                    this._setSelectedClass();
                }
                this._removeFocusFromAllItems();
                this.activated.setAttribute('focused', '');
                this._setA11yAttributes(this.activated);
                this.activated.focus();
            }
        }
        _setSelectedClass() {
            const selectedItem = this.selectableItems.find((element) => {
                return element.active === true;
            });
            selectedItem.classList.add(this.selectedClass);
        }
        _removeSelectedClass() {
            this.selectableItems.forEach((element) => {
                element.classList.remove('active');
            });
        }
        selectedChanged(index) {
            if (this.activated && this.activated.index !== index) {
                this.activated['active'] = false;
                this._setA11yAttributes(this.activated);
                this.selected = index;
                this.selectActiveElement();
            }
        }
        _removeFocusFromAllItems() {
            this.selectableItems.forEach((element) => {
                element.removeAttribute('focused');
            });
        }
        addEvents() {
            this.onBlur();
            this.onFocus();
            this.selectableItems.forEach((element) => {
                if (element) {
                    this._setA11yAttributes(element);
                    this.onClick(element);
                    this.onKeyDown(element);
                }
            });
        }
        onClick(element) {
            element.addEventListener('click', (event) => this._handleOnTapEvent(event));
        }
        _handleOnTapEvent(event) {
            const selectionChangedEvent = new CustomEvent('onTap', {
                detail: {
                    index: event.currentTarget.index,
                    id: event.currentTarget.id,
                },
                bubbles: true,
                composed: true,
            });
            this.dispatchEvent(selectionChangedEvent);
            this.selectedChanged(event.currentTarget.index);
        }
        onKeyDown(element) {
            element.addEventListener('keydown', (event) => {
                const code = event.keyCode ? event.keyCode : +event.code;
                if (code === keys.enter || code === keys.space) {
                    this._handleEnterEvent();
                }
                this._handleArrowKeysEvent(code, event);
            });
        }
        _handleEnterEvent() {
            const selectedIndex = this.selectableItems[this.focusedIndex].index;
            const selectionChangedEvent = new CustomEvent('onEnter', {
                detail: {
                    index: selectedIndex,
                    id: this.selectableItems[this.focusedIndex].id,
                },
                bubbles: true,
                composed: true,
            });
            this.dispatchEvent(selectionChangedEvent);
            this.selectedChanged(selectedIndex);
        }
        _handleArrowKeysEvent(key, e) {
            if (this.orientation === 'horizontal') {
                if (key === keys.left) {
                    this.selectItem(this.focusedIndex, e, false);
                }
                else if (key === keys.right) {
                    this.selectItem(this.focusedIndex, e, true);
                }
                else if (key === keys.home) {
                    this.selectedChanged(this.selectableItems[0].index);
                }
                else if (key === keys.end) {
                    this.selectedChanged(this.selectableItems[this.selectableItemLength - 1].index);
                }
            }
            else {
                if (key === keys.up) {
                    this.selectItem(this.focusedIndex, e, false);
                }
                else if (key === keys.down) {
                    this.selectItem(this.focusedIndex, e, true);
                }
            }
        }
        selectItem(index, e, nextItem) {
            const i = this._checkForActionIndex(index, nextItem);
            this._removeFocusFromAllItems();
            this._setFocusOnItem(i);
            if (i === this.selectableItemLength - 1 || i === 0) {
                e.preventDefault();
            }
            this.selectableItems[i].scrollIntoView();
        }
        _setFocusOnItem(index) {
            this.selectableItems[index].setAttribute('focused', '');
            if (this.automaticActivation) {
                this.selectedChanged(index);
            }
            else {
                this.selectableItems[index].focus();
            }
        }
        _checkForActionIndex(index, nextItem) {
            if (nextItem) {
                return (index + 1) % this.selectableItemLength;
            }
            else {
                return (index - 1 + this.selectableItemLength) % this.selectableItemLength;
            }
        }
        onBlur() {
            this.addEventListener('blur', (event) => {
                const currentTarget = event.currentTarget;
                if (event && event.relatedTarget && event.relatedTarget.offsetParent) {
                    if (this.id !== event.relatedTarget.offsetParent.id) {
                        currentTarget.querySelector('[focused]').removeAttribute('focused');
                    }
                }
                const blurEvent = new CustomEvent('onItemContainerBlur', {
                    detail: {
                        id: currentTarget.id,
                    },
                    bubbles: true,
                    composed: true,
                });
                this.dispatchEvent(blurEvent);
            }, true);
        }
        onFocus() {
            this.addEventListener('focus', (event) => {
                const currentTarget = event.currentTarget;
                const currentActive = currentTarget.querySelector('[active]');
                if (currentActive && event.relatedTarget && event.relatedTarget.offsetParent) {
                    if (this.id !== event.relatedTarget.offsetParent.id) {
                        currentActive.setAttribute('focused', '');
                    }
                }
                const focusEvent = new CustomEvent('onItemContainerFocus', {
                    detail: {
                        id: currentTarget.id,
                    },
                    bubbles: true,
                    composed: true,
                });
                this.dispatchEvent(focusEvent);
            }, true);
        }
        _setA11yAttributes(element) {
            if (element.active) {
                element.setAttribute('aria-selected', 'true');
                element.setAttribute('tabindex', '0');
            }
            else {
                element.setAttribute('aria-selected', 'false');
                element.setAttribute('tabindex', '-1');
            }
        }
        updated(attributeList) {
            if (attributeList.has('selected')) {
                const index = this.selectableItems.find((item) => item.index === this.selected)
                    ? this.selected
                    : 0;
                this.selectedChanged(index);
            }
        }
    };
}
