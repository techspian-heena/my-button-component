var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { LitElement, customElement, property } from "lit-element";
import KeyboardBehaviour from "..";
let KeyBindings = {};
export function setKeyBindings(keyBindings) {
    KeyBindings = keyBindings;
}
let KeyboardBehaviourElement = class KeyboardBehaviourElement extends KeyboardBehaviour(LitElement) {
    constructor() {
        super(...arguments);
        this.preventDefault = false;
    }
    get keyBindings() {
        return KeyBindings;
    }
    keyPressed(e) {
        if (this.preventDefault) {
            e.detail.keyboardEvent.preventDefault();
            e.preventDefault();
        }
    }
};
__decorate([
    property({ type: Boolean, attribute: "prevent-default", reflect: true }),
    __metadata("design:type", Object)
], KeyboardBehaviourElement.prototype, "preventDefault", void 0);
KeyboardBehaviourElement = __decorate([
    customElement("orxe-keyboard-behaviour-element")
], KeyboardBehaviourElement);
export { KeyboardBehaviourElement };
