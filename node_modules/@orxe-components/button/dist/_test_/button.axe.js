import { OrxeButton, OrxeFloatButton } from '../index';
import { axe, toHaveNoViolations } from '@orxe-devkit/axe';
expect.extend(toHaveNoViolations);
describe('orxe-button-axe', () => {
    let button;
    beforeEach(function () {
        OrxeButton;
        document.body.appendChild(document.createElement('orxe-button'));
        button = document.querySelector('orxe-button');
    });
    afterEach(function () {
        button.remove();
    });
    async function setProperty(property, value) {
        button[property] = value;
        await button.requestUpdate();
    }
    it('should support all WCAG Accessibility Rules. when default button is rendered', async () => {
        await setProperty('a11yLabel', 'Book Rooms');
        const result = await axe(button);
        expect(result).toHaveNoViolations();
    });
    it('should support all WCAG Accessibility Rules. when default disabled button is rendered', async () => {
        await setProperty('a11yLabel', 'Book Rooms');
        await setProperty('disabled', true);
        const result = await axe(button);
        expect(result).toHaveNoViolations();
    });
    it('should support all WCAG Accessibility Rules. for link button rendered', async () => {
        await setProperty('href', './home');
        await setProperty('a11yLabel', 'View Map');
        const result = await axe(button);
        expect(result).toHaveNoViolations();
    });
    it('should support all WCAG Accessibility Rules. for icon only button rendered', async () => {
        await setProperty('kind', 'iconOnly');
        await setProperty('a11yLabel', 'left Arrow');
        const result = await axe(button);
        expect(result).toHaveNoViolations();
    });
    it('should support all WCAG Accessibility Rules. for icon and text button rendered', async () => {
        await setProperty('kind', 'iconAndText');
        await setProperty('a11yLabel', 'location');
        const result = await axe(button);
        expect(result).toHaveNoViolations();
    });
});
describe('orxe-float-button-axe-violation-test', () => {
    let floatButton;
    let floatContainer;
    beforeEach(function () {
        OrxeButton;
        OrxeFloatButton;
        document.body.appendChild(document.createElement('orxe-float-button'));
        floatButton = document.createElement('orxe-button');
        floatContainer = document.querySelector('orxe-float-button');
        floatContainer.append(floatButton);
    });
    afterEach(function () {
        floatContainer.remove();
    });
    it('should support all WCAG Accessibility Rules. for float button rendered', async () => {
        floatButton.kind = 'float';
        floatButton.a11yLabel = 'float button';
        await floatButton.requestUpdate();
        const result = await axe(floatContainer);
        expect(result).toHaveNoViolations();
    });
});
