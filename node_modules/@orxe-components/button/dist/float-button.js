var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { html, customElement, LitElement } from 'lit-element';
import styles from './floatbutton-css';
let OrxeFloatButton = class OrxeFloatButton extends LitElement {
    firstUpdated() {
        this.setWidth();
    }
    async setWidth() {
        const slots = (await this.shadowRoot.querySelector('slot')) &&
            this.shadowRoot.querySelector('slot').assignedNodes()[0].parentNode.childNodes;
        const maxArray = [];
        for (let i = 0; i < (slots && slots.length); i++) {
            if (slots[i].nodeName === 'ORXE-BUTTON') {
                maxArray.push(slots[i].offsetWidth);
            }
        }
        const maxOfArray = Math.max(...maxArray);
        for (let i = 0; i < (slots && slots.length); i++) {
            if (slots[i].nodeName === 'ORXE-BUTTON') {
                slots[i].style.width = maxOfArray.toString() + 'px';
            }
        }
    }
    render() {
        return html `
      <div class="float-button-container ">
        <slot></slot>
      </div>
    `;
    }
};
OrxeFloatButton.styles = styles;
OrxeFloatButton = __decorate([
    customElement('orxe-float-button')
], OrxeFloatButton);
export default OrxeFloatButton;
