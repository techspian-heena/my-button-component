var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { html, customElement, property, LitElement } from 'lit-element';
import styles from './button-css';
import ripple from '@orxe/theme/dist/utils/js/ripple';
import { initRipple } from '@orxe-components/utils';
import '@orxe-components/icon';
const ICON_ONLY = 'iconOnly';
const ICON_AND_TEXT = 'iconAndText';
const FLOAT_BUTTON = 'float';
const TERTIARY = 'tertiary';
const kindPropValues = ['primary', 'secondary', 'tertiary', 'iconOnly', 'float', 'iconAndText'];
const targetPropValues = ['_blank', '_self', '_parent', '_top'];
const typePropValues = ['submit', 'reset', 'button'];
const sizePropValues = ['small', 'medium', 'large', 'extra-small'];
const iconSizePropValues = ['small', 'medium', 'large', 'normal'];
let OrxeButton = class OrxeButton extends LitElement {
    constructor() {
        super(...arguments);
        this.disabled = false;
        this.kind = 'primary';
        this.href = '';
        this.rel = '';
        this.autofocus = false;
        this.target = '_self';
        this.type = '';
        this.size = 'small';
        this.icon = '';
        this.iconSize = '';
        this.a11yLabel = '';
        this.preventBubble = false;
        this.preventComposed = false;
    }
    _handleClick(event) {
        if (!this.disabled) {
            if (this.type === 'submit' || this.type === 'reset') {
                this._createRemoveFakeBtnToAction();
            }
            initRipple(event);
        }
        else {
            event.stopPropagation();
        }
    }
    _createRemoveFakeBtnToAction() {
        const form = this.closest('form');
        if (form) {
            const fakeButton = document.createElement('button');
            fakeButton.type = this.type;
            fakeButton.style.display = 'none';
            form.appendChild(fakeButton);
            fakeButton.click();
            fakeButton.remove();
        }
    }
    onFocus() {
        const clickEvent = new CustomEvent('onFocus', {
            bubbles: !this.preventBubble,
            composed: !this.preventComposed,
        });
        this.dispatchEvent(clickEvent);
    }
    onBlur() {
        const clickEvent = new CustomEvent('onBlur', {
            bubbles: !this.preventBubble,
            composed: !this.preventBubble,
        });
        this.dispatchEvent(clickEvent);
    }
    focus() {
        this.updateComplete.then(() => {
            this.shadowRoot.querySelector('button').focus();
        });
    }
    returnIcon() {
        if (this.kind === ICON_AND_TEXT || this.kind === ICON_ONLY || this.icon) {
            return html `
        <orxe-icon
          aria-label="${this.a11yLabel}"
          icon="${this.icon}"
          part="icon"
          size="${this.kind === TERTIARY || (this.kind === ICON_AND_TEXT && !this.iconSize)
                ? 'small'
                : this.iconSize}"
        ></orxe-icon>
      `;
        }
        return;
    }
    render() {
        const { autofocus, disabled, href, rel, target, type } = this;
        const btnSize = this.kind == ICON_ONLY || this.kind == ICON_AND_TEXT ? '' : 'orxe-btn--' + this.size;
        return href || this.kind == ICON_AND_TEXT || (this.iconSize && this.kind == ICON_AND_TEXT)
            ? html `
          <a
            id="button-id"
            aria-label="${this.a11yLabel}"
            role="button"
            class=" ${this.kind == ICON_AND_TEXT
                ? this.kind
                : this.size && this.kind == ICON_AND_TEXT
                    ? ' orxe-link icon-link--' + this.size
                    : 'orxe-link orxe-link--' + this.size}  "
            href="${href === '' ? '#' : href}"
            rel="${rel}"
            target="${target}"
            type="${type}"
            part="link"
            @click="${this._handleClick}}"
          >
            ${this.returnIcon()}
            <slot></slot>
          </a>
        `
            : html `
          <div class="button-container">
            <button
              id="button-id"
              aria-label="${this.a11yLabel}"
              @click="${this._handleClick}"
              @focus="${this.onFocus}"
              @blur="${this.onBlur}"
              type=${type}
              class=" orxe-button ${this.kind == TERTIARY && this.icon
                ? 'tertiary iconAndText'
                : ''} ${this.kind + ' ' + (this.kind !== FLOAT_BUTTON ? btnSize : '')} "
              ?autofocus="${autofocus}"
              ?disabled="${disabled}"
              part="button"
            >
              ${this.kind !== ICON_ONLY
                ? this.kind === TERTIARY && this.icon
                    ? html `
                      ${this.returnIcon()} <slot></slot>
                    `
                    : html `
                      <slot></slot>
                    `
                : this.returnIcon()}
            </button>
          </div>
        `;
    }
    static get styles() {
        return [ripple, styles];
    }
};
__decorate([
    property({ type: Boolean, reflect: true, attribute: 'disabled' }),
    __metadata("design:type", Object)
], OrxeButton.prototype, "disabled", void 0);
__decorate([
    property({
        type: String,
        attribute: 'kind',
        hasChanged(newValue) {
            if (kindPropValues.indexOf(newValue.trim()) > -1) {
                return true;
            }
            console.warn('Correct value for kind property is not provided: ', newValue);
            return false;
        },
    }),
    __metadata("design:type", Object)
], OrxeButton.prototype, "kind", void 0);
__decorate([
    property({ type: String, attribute: 'href' }),
    __metadata("design:type", Object)
], OrxeButton.prototype, "href", void 0);
__decorate([
    property({ type: String, attribute: 'rel' }),
    __metadata("design:type", Object)
], OrxeButton.prototype, "rel", void 0);
__decorate([
    property({ type: Boolean, reflect: true, attribute: 'autofocus' }),
    __metadata("design:type", Object)
], OrxeButton.prototype, "autofocus", void 0);
__decorate([
    property({
        type: String,
        attribute: 'target',
        hasChanged(newValue) {
            if (targetPropValues.indexOf(newValue.trim()) > -1) {
                return true;
            }
            console.warn('Correct value for target property is not provided: ', newValue);
            return false;
        },
    }),
    __metadata("design:type", Object)
], OrxeButton.prototype, "target", void 0);
__decorate([
    property({
        type: String,
        attribute: 'type',
        hasChanged(newValue) {
            if (typePropValues.indexOf(newValue.trim()) > -1 || newValue === '') {
                return true;
            }
            console.warn('Correct value for type property is not provided: ', newValue);
            return false;
        },
    }),
    __metadata("design:type", Object)
], OrxeButton.prototype, "type", void 0);
__decorate([
    property({
        type: String,
        attribute: 'size',
        hasChanged(newValue) {
            if (sizePropValues.indexOf(newValue.trim()) > -1) {
                return true;
            }
            console.warn('Correct value for size property is not provided: ', newValue);
            return false;
        },
    }),
    __metadata("design:type", Object)
], OrxeButton.prototype, "size", void 0);
__decorate([
    property({ type: String, attribute: 'icon' }),
    __metadata("design:type", Object)
], OrxeButton.prototype, "icon", void 0);
__decorate([
    property({
        type: String,
        attribute: 'icon-size',
        hasChanged(newValue) {
            if (iconSizePropValues.indexOf(newValue.trim()) > -1 || newValue === '') {
                return true;
            }
            console.warn('Correct value for icon-size attribute is not provided: ', newValue);
            return false;
        },
    }),
    __metadata("design:type", Object)
], OrxeButton.prototype, "iconSize", void 0);
__decorate([
    property({ type: String, attribute: 'a11y-label' }),
    __metadata("design:type", Object)
], OrxeButton.prototype, "a11yLabel", void 0);
__decorate([
    property({ type: Boolean, attribute: 'prevent-bubble' }),
    __metadata("design:type", Object)
], OrxeButton.prototype, "preventBubble", void 0);
__decorate([
    property({ type: Boolean, attribute: 'prevent-composed' }),
    __metadata("design:type", Object)
], OrxeButton.prototype, "preventComposed", void 0);
OrxeButton = __decorate([
    customElement('orxe-button')
], OrxeButton);
export default OrxeButton;
