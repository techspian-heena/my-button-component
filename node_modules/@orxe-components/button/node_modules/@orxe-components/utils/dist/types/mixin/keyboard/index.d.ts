declare type Constructor<T> = new (...args: any[]) => T;
export default function <T extends Constructor<any>>(Base: T): {
    new (...args: any[]): {
        [x: string]: any;
        _keyBindings: any;
        readonly keyBindings: any;
        keyEventTarget: any;
        stopKeyboardEventPropagation: boolean;
        _boundKeyHandlers: any[];
        connectedCallback(): void;
        disconnectedCallback(): void;
        _prepKeyBindings(): void;
        _addKeyBinding(eventString: any, handlerName: any): void;
        _listenKeyEventListeners(): void;
        _unlistenKeyEventListeners(): void;
        _onKeyBindingEvent(keyBindings: any, event: any): void;
        _triggerKeyHandler(keyCombo: any, handlerName: any, keyboardEvent: any): void;
    };
} & T;
export {};
