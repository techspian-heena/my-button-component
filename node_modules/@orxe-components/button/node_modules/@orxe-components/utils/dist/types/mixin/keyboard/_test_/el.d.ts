import { LitElement } from "lit-element";
export declare function setKeyBindings(keyBindings: Object): void;
declare const KeyboardBehaviourElement_base: {
    new (...args: any[]): {
        [x: string]: any;
        _keyBindings: any;
        readonly keyBindings: any;
        keyEventTarget: any;
        stopKeyboardEventPropagation: boolean;
        _boundKeyHandlers: any[];
        connectedCallback(): void;
        disconnectedCallback(): void;
        _prepKeyBindings(): void;
        _addKeyBinding(eventString: any, handlerName: any): void;
        _listenKeyEventListeners(): void;
        _unlistenKeyEventListeners(): void;
        _onKeyBindingEvent(keyBindings: any, event: any): void;
        _triggerKeyHandler(keyCombo: any, handlerName: any, keyboardEvent: any): void;
    };
} & typeof LitElement;
export declare class KeyboardBehaviourElement extends KeyboardBehaviourElement_base {
    preventDefault: boolean;
    get keyBindings(): {};
    keyPressed(e: any): void;
}
export {};
